// assignmentProcessing.cpp : combines assigment sentences between two files
// NIO Automotives
// Siyang Liu (6796)
// 2018-06-06

#include "stdafx.h"
#include<stdio.h>
#include<iostream>
#include<fstream>
#include<string>
#include<vector>
#include<map>

#include<boost/algorithm/string/split.hpp>
#include<boost/algorithm/string/trim.hpp>

using namespace std;
using namespace boost;

typedef map <string, string> STR_STR_MAP;

void reportProgress(int& num) {
	//keep track of progress
	if (num % 500 == 0) {
		cout << "processed" << num << "lines" << endl;
	}
}

int main()
{
	//get Line from raw_data_input
	fstream from("raw_data_input.cpp"); //file reader
	string curLine = ""; //current line 
	int lineNum = 0; //line number
	string left = "";
	string right = ""; 

	STR_STR_MAP rawDataMap; //assignment pairing
	STR_STR_MAP::iterator iter; //map iterator

	cout << "Starting to process raw data input" << endl;
	while (getline(from, curLine))
	{
		lineNum++;
		trim(curLine);
		//cout << curLine << endl;

		int idx = curLine.find("="); 		//detect "=" sign
		if (idx != -1) {
			//cout << idx << endl;
			//parse line into left and right
			left = curLine.substr(0, idx);
			right = curLine.substr(idx + 1, curLine.size() - idx - 2);
			trim(left);
			trim(right);
			//cout << "Left: " << left << " Right: " << right << endl;
			//store correlation in unordered map; 
			//left(val to be matched) is key; right(raw input data) is value
			rawDataMap[left] = right;
		}

		reportProgress(lineNum);

	}
	from.close();

	//rawDataMap["0.0"] = "0.0";//handle one edge case

	cout << "Raw Data map contains " << rawDataMap.size() << " pairs" << endl;


	//create output files 
	ofstream err;
	err.open("err.txt", ios::trunc);
	err.close();
	ofstream processed;
	processed.open("processed.txt", ios::trunc);
	processed.close();
	ofstream varComp;
	varComp.open("variableComparator.csv", ios::trunc);
	varComp.close();

	//open signal_process_module
	fstream to("signal_process_module.cpp");
	//re-initialize line number 
	lineNum = 0;
	//initialize variable name containers
	string sourceVar = "";
	string endVar = "";

	cout << "Starting to work on signal process module" << endl;
	while (getline(to, curLine)) {
		lineNum++;
		trim(curLine);
		//cout << curLine << endl;
		int idx = curLine.find("="); 		//detect "=" sign
		if (idx != -1) {                    //if "=" exists: replace

			// handle one line of code spanning two lines in file
			int checkFullLine = curLine.find(";"); //check line end
			if (checkFullLine == -1) {  //cannot find ";"
				string tmp = curLine;
				getline(to, curLine);
				trim(curLine);
				lineNum++;
				curLine = tmp + curLine;
			}

			//parse line into left and right
			left = curLine.substr(0, idx);
			right = curLine.substr(idx + 1, curLine.size() - idx - 2);
			trim(left);
			trim(right);
			endVar = left;					//store output variable name
			left = left + " = "; 			//now left includes the "=" sign
			//cout << "Left: " << left << " Right: " << right << endl;		

			//find replacement
			bool foundMatch = false;

			if (right.find("(") != -1) { //found (, special case
				for (iter = rawDataMap.begin(); iter != rawDataMap.end(); iter++) {
					//write line to new file
					string key = iter->first;
					string val = iter->second;
					if (right.find(key) != -1) { //found match
						right = right.replace(right.find(key), key.size(), val);
						foundMatch = true;
					}
				}
			}
			else { // no (, simple case
				iter = rawDataMap.find(right);
				if (iter != rawDataMap.end()) { //found key in map
					right = iter->second;
					foundMatch = true;
				}
			}

			if (!foundMatch) {// cannot find replacement, right is unique
				err.open("err.txt", ios::out | ios::app);
				err << "Error: cannot find replacement @ line" << lineNum << endl;
				err.close();
			}
			else { //Replacement is possible 
				sourceVar = right;
				varComp.open("variableComparator.csv", ios::out | ios::app);
				varComp << endVar << "," << sourceVar << endl;
				varComp.close();
			}

			curLine = left + right + ";";

		}

		processed.open("processed.txt", ios::out | ios::app);
		processed << curLine << endl;
		processed.close();

		reportProgress(lineNum);
	}
	to.close();
	// use alt+f8 to autocorrect format 
    return 0;
}

